#!/bin/sh
# VNC Port
vnc="$(netstat -aln | awk '
  $6 == "LISTEN" {
    if ($4 ~ "[.:][0-9]+$") {
      split($4, a, /[:.]/);
      port = a[length(a)];
      p[port] = 1
    }
  }
  END {
    for (i = 5900; i < 5999 && p[i]; i++){};
    if (i == 5999) {exit 1};
    print i
  }
')"

setup() {
  # Determine interface automatically
  nic="$(ifconfig -l | awk '{print $1}')"
  # Enabling the Bridge
  bridge="$(ifconfig bridge create)"
  # Adding network card interface to the bridge.
  ifconfig "${bridge}" addm "${nic}" up
  # In order to configure the system to start bhyve guests at boot time,
  # the following configurations must be made in the specified files:
  # /boot/loader.conf
  sysrc -f /boot/loader.conf if_bridge_load="YES"
  sysrc -f /boot/loader.conf if_tap_load="YES"
  sysrc -f /boot/loader.conf vmm_load="YES"
  # /etc/rc.conf
  sysrc cloned_interfaces="${bridge}"
  sysrc "ifconfig_${bridge}=addm ${nic}"
  # /etc/sysctl.conf
  {
  cat << EOF
net.link.tap.up_on_open="1"
net.link.bridge.ipfw="1"
EOF
} >> /etc/sysctl.conf
  # Load required modules
  kldload if_tap vmm
  sysctl net.link.tap.up_on_open="1"
  sysctl net.link.bridge.ipfw="1"
  # Create a VMs dataset
  zfs create -p zroot/VMs/ISOs
  cp ./efi.fd /zroot/VMs
  # Create rc.d directroy
  rcd="/usr/local/etc/rc.d"
  if [ ! -d "${rcd}" ]; then
    mkdir /usr/local/etc/rc.d
  fi
  # Create bhyve startup script
  touch /usr/local/etc/rc.d/bhyve
  chmod +x /usr/local/etc/rc.d/bhyve
  cat << 'EOF' >> /usr/local/etc/rc.d/bhyve
#!/bin/sh
#
# PROVIDE: bhyve
# REQUIRE: DAEMON
# KEYWORD: shutdown
#
. /etc/rc.subr
name=bhyve
rcvar=bhyve_enable
start_cmd="${name}"_start
bhyve_start() {
}
load_rc_config "${name}"
run_rc_command "$1"
EOF
  sysrc bhyve_enable="YES"
}

clean() {
  bridge="$(sysrc cloned_interfaces | awk '{print $2}')"
  sysctl net.link.tap.up_on_open="0"
  sysctl net.link.bridge.ipfw="0"
  kldunload if_tap vmm
  ifconfig "${bridge}" destroy
  # /boot/loader.conf
  sysrc -x -f /boot/loader.conf if_bridge_load
  sysrc -x -f /boot/loader.conf if_tap_load
  sysrc -x -f /boot/loader.conf vmm_load
  # /etc/rc.conf
  sysrc -x cloned_interfaces
  sysrc -x ifconfig_"${bridge}"
  # /etc/sysctl.conf
  sed -i '' 's/net.link.tap.up_on_open="1"//g' /etc/sysctl.conf
  sed -i '' 's/net.link.bridge.ipfw="1"//g' /etc/sysctl.conf
  sed -i '' '/^$/d' /etc/sysctl.conf
  # Delete rc script
  rm /usr/local/etc/rc.d/bhyve
  sysrc -x bhyve_enable
}

freebsd() {
  bridge="$(sysrc cloned_interfaces | awk '{print $2}')"
  # Create a VM dataset
  zfs create zroot/VMs/"${name}"
  # Create a tap interface and make it member of the bridge
  tap="$(ifconfig tap create)"
  ifconfig "${bridge}" addm "${tap}"
  # To start tap interface at boot time
  sysrc cloned_interfaces+="${tap}"
  sysrc "ifconfig_${bridge}=$(sysrc ifconfig_"${bridge}" | awk '
  { for(i=2; i<=NF; i++) printf "%s",$i (i==NF?ORS:OFS) }') addm ${tap}"
  # Create ZFS volume
  zfs create -V"${disk}"G -o volmode=dev zroot/VMs/"${name}"/disk0
  # VM installation
  installation() {
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 3,ahci-cd,"${freebsd_iso}" \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768,wait \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}"
  }
  # VM starting
  starting()
  {
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768 \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}"
  }   
  # Start the installation
  installation &&
  # Starting the loop after completion of the installation
  while true; do
    starting || break;
  done > /dev/null 2>&1 &
  
  touch /usr/local/etc/rc.d/"${name}"
  chmod +x /usr/local/etc/rc.d/"${name}"
  {
  cat << EOF
#!/bin/sh
#
# PROVIDE: ${name}
# REQUIRE: DAEMON
# KEYWORD: shutdown
#

. /etc/rc.subr

cpu="${cpu}"
ram="${ram}"
tap="${tap}"
name="${name}"
EOF
  sed -n '3,16p' ./bhyve
  cat << EOF

start_cmd=${name}_start
stop_cmd=${name}_stop
restart_cmd=${name}_restart
delete_cmd=${name}_delete

${name}_start() {
EOF
  cat << 'EOF'
  while true; do
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768 \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}" || break;
  done > /dev/null 2>&1 &
}
EOF
  cat << EOF

${name}_stop() {
EOF
  cat << 'EOF'
  bhyvectl --vm="${name}" --force-poweroff
}
EOF
  cat << EOF

${name}_restart() {
EOF
cat << 'EOF'
  bhyvectl --vm="${name}" --force-reset
}
EOF
  cat << EOF

${name}_delete() {
EOF
  cat << 'EOF'
  bhyvectl --vm="${name}" --destroy
  sleep 5
  ifconfig "${tap}" destroy
  sysrc cloned_interfaces-="${tap}"
EOF
  cat << EOF
  sed -i '' 's/ addm ${tap}//g' /etc/rc.conf
  sed -i '' 's/service ${name} start && sleep 5//g' /usr/local/etc/rc.d/bhyve
  sed -i '' '/^$/d' /usr/local/etc/rc.d/bhyve
EOF
  cat << 'EOF'
  zfs destroy -r zroot/VMs/"${name}"
  rm /usr/local/etc/rc.d/"${name}"
}

load_rc_config "${name}"
run_rc_command "$1"
EOF
} > /usr/local/etc/rc.d/"${name}"
  # Add the VM to /usr/local/etc/rc.d/bhyve for autostart
  sed -i '' -e "12s/^/service ${name} start && sleep 5\n/g"  /usr/local/etc/rc.d/bhyve
}

openbsd() {
  bridge="$(sysrc cloned_interfaces | awk '{print $2}')"
  # Create a VM dataset
  zfs create zroot/VMs/"${name}"
  # Create a tap interface and make it member of the bridge
  tap="$(ifconfig tap create)"
  ifconfig "${bridge}" addm "${tap}"
  # To start tap interface at boot time
  sysrc cloned_interfaces+="${tap}"
  sysrc "ifconfig_${bridge}=$(sysrc ifconfig_"${bridge}" | awk '
  { for(i=2; i<=NF; i++) printf "%s",$i (i==NF?ORS:OFS) }') addm ${tap}"
  # Create ZFS volume
  zfs create -V"${disk}"G -o volmode=dev zroot/VMs/"${name}"/disk0
  # VM installation
  installation() {
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,amd_hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 3,ahci-hd,"${openbsd_iso}" \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768,wait \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}"
  }
  # VM starting
  starting()
  {
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,amd_hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768 \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}"
  }   
  # Start the installation
  installation &&
  # Starting the loop after completion of the installation
  while true; do
    starting || break;
  done > /dev/null 2>&1 &
  
  touch /usr/local/etc/rc.d/"${name}"
  chmod +x /usr/local/etc/rc.d/"${name}"
  {
  cat << EOF
#!/bin/sh
#
# PROVIDE: ${name}
# REQUIRE: DAEMON
# KEYWORD: shutdown
#

. /etc/rc.subr

cpu="${cpu}"
ram="${ram}"
tap="${tap}"
name="${name}"
EOF
  sed -n '3,16p' ./bhyve
  cat << EOF

start_cmd=${name}_start
stop_cmd=${name}_stop
restart_cmd=${name}_restart
delete_cmd=${name}_delete

${name}_start() {
EOF
  cat << 'EOF'
  while true; do
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,amd_hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768 \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}" || break;
  done > /dev/null 2>&1 &
}
EOF
  cat << EOF

${name}_stop() {
EOF
  cat << 'EOF'
  bhyvectl --vm="${name}" --force-poweroff
}
EOF
  cat << EOF

${name}_restart() {
EOF
cat << 'EOF'
  bhyvectl --vm="${name}" --force-reset
}
EOF
  cat << EOF

${name}_delete() {
EOF
  cat << 'EOF'
  bhyvectl --vm="${name}" --destroy
  sleep 5
  ifconfig "${tap}" destroy
  sysrc cloned_interfaces-="${tap}"
EOF
  cat << EOF
  sed -i '' 's/ addm ${tap}//g' /etc/rc.conf
  sed -i '' 's/service ${name} start && sleep 5//g' /usr/local/etc/rc.d/bhyve
  sed -i '' '/^$/d' /usr/local/etc/rc.d/bhyve
EOF
  cat << 'EOF'
  zfs destroy -r zroot/VMs/"${name}"
  rm /usr/local/etc/rc.d/"${name}"
}

load_rc_config "${name}"
run_rc_command "$1"
EOF
} > /usr/local/etc/rc.d/"${name}"
  # Add the VM to /usr/local/etc/rc.d/bhyve for autostart
  sed -i '' -e "12s/^/service ${name} start && sleep 5\n/g"  /usr/local/etc/rc.d/bhyve
}

ubuntu() {
  bridge="$(sysrc cloned_interfaces | awk '{print $2}')"
  # Create a VM dataset
  zfs create zroot/VMs/"${name}"
  # Create a tap interface and make it member of the bridge
  tap="$(ifconfig tap create)"
  ifconfig "${bridge}" addm "${tap}"
  # To start tap interface at boot time
  sysrc cloned_interfaces+="${tap}"
  sysrc "ifconfig_${bridge}=$(sysrc ifconfig_"${bridge}" | awk '
  { for(i=2; i<=NF; i++) printf "%s",$i (i==NF?ORS:OFS) }') addm ${tap}"
  # Create ZFS volume
  zfs create -V"${disk}"G -o volmode=dev zroot/VMs/"${name}"/disk0
  # VM installation
  installation() {
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 3,ahci-cd,"${ubuntu_iso}" \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768,wait \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}"
  }
  # VM starting
  starting()
  {
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768 \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}"
  }   
  # Start the installation
  installation &&
  # Starting the loop after completion of the installation
  while true; do
    starting || break;
  done > /dev/null 2>&1 &
  
  touch /usr/local/etc/rc.d/"${name}"
  chmod +x /usr/local/etc/rc.d/"${name}"
  {
  cat << EOF
#!/bin/sh
#
# PROVIDE: ${name}
# REQUIRE: DAEMON
# KEYWORD: shutdown
#

. /etc/rc.subr

cpu="${cpu}"
ram="${ram}"
tap="${tap}"
name="${name}"
EOF
  sed -n '3,16p' ./bhyve
  cat << EOF

start_cmd=${name}_start
stop_cmd=${name}_stop
restart_cmd=${name}_restart
delete_cmd=${name}_delete

${name}_start() {
EOF
  cat << 'EOF'
  while true; do
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768 \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}" || break;
  done > /dev/null 2>&1 &
}
EOF
  cat << EOF

${name}_stop() {
EOF
  cat << 'EOF'
  bhyvectl --vm="${name}" --force-poweroff
}
EOF
  cat << EOF

${name}_restart() {
EOF
cat << 'EOF'
  bhyvectl --vm="${name}" --force-reset
}
EOF
  cat << EOF

${name}_delete() {
EOF
  cat << 'EOF'
  bhyvectl --vm="${name}" --destroy
  sleep 5
  ifconfig "${tap}" destroy
  sysrc cloned_interfaces-="${tap}"
EOF
  cat << EOF
  sed -i '' 's/ addm ${tap}//g' /etc/rc.conf
  sed -i '' 's/service ${name} start && sleep 5//g' /usr/local/etc/rc.d/bhyve
  sed -i '' '/^$/d' /usr/local/etc/rc.d/bhyve
EOF
  cat << 'EOF'
  zfs destroy -r zroot/VMs/"${name}"
  rm /usr/local/etc/rc.d/"${name}"
}

load_rc_config "${name}"
run_rc_command "$1"
EOF
} > /usr/local/etc/rc.d/"${name}"
  # Add the VM to /usr/local/etc/rc.d/bhyve for autostart
  sed -i '' -e "12s/^/service ${name} start && sleep 5\n/g"  /usr/local/etc/rc.d/bhyve
}

fedora() {
  bridge="$(sysrc cloned_interfaces | awk '{print $2}')"
  # Create a VM dataset
  zfs create zroot/VMs/"${name}"
  # Create a tap interface and make it member of the bridge
  tap="$(ifconfig tap create)"
  ifconfig "${bridge}" addm "${tap}"
  # To start tap interface at boot time
  sysrc cloned_interfaces+="${tap}"
  sysrc "ifconfig_${bridge}=$(sysrc ifconfig_"${bridge}" | awk '
  { for(i=2; i<=NF; i++) printf "%s",$i (i==NF?ORS:OFS) }') addm ${tap}"
  # Create ZFS volume
  zfs create -V"${disk}"G -o volmode=dev zroot/VMs/"${name}"/disk0
  # VM installation
  installation() {
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 3,ahci-cd,"${fedora_iso}" \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768,wait \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}"
  }
  # VM starting
  starting()
  {
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768 \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}"
  }   
  # Start the installation
  installation &&
  # Starting the loop after completion of the installation
  while true; do
    starting || break;
  done > /dev/null 2>&1 &
  
  touch /usr/local/etc/rc.d/"${name}"
  chmod +x /usr/local/etc/rc.d/"${name}"
  {
  cat << EOF
#!/bin/sh
#
# PROVIDE: ${name}
# REQUIRE: DAEMON
# KEYWORD: shutdown
#

. /etc/rc.subr

cpu="${cpu}"
ram="${ram}"
tap="${tap}"
name="${name}"
EOF
  sed -n '3,16p' ./bhyve
  cat << EOF

start_cmd=${name}_start
stop_cmd=${name}_stop
restart_cmd=${name}_restart
delete_cmd=${name}_delete

${name}_start() {
EOF
  cat << 'EOF'
  while true; do
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768 \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}" || break;
  done > /dev/null 2>&1 &
}
EOF
  cat << EOF

${name}_stop() {
EOF
  cat << 'EOF'
  bhyvectl --vm="${name}" --force-poweroff
}
EOF
  cat << EOF

${name}_restart() {
EOF
cat << 'EOF'
  bhyvectl --vm="${name}" --force-reset
}
EOF
  cat << EOF

${name}_delete() {
EOF
  cat << 'EOF'
  bhyvectl --vm="${name}" --destroy
  sleep 5
  ifconfig "${tap}" destroy
  sysrc cloned_interfaces-="${tap}"
EOF
  cat << EOF
  sed -i '' 's/ addm ${tap}//g' /etc/rc.conf
  sed -i '' 's/service ${name} start && sleep 5//g' /usr/local/etc/rc.d/bhyve
  sed -i '' '/^$/d' /usr/local/etc/rc.d/bhyve
EOF
  cat << 'EOF'
  zfs destroy -r zroot/VMs/"${name}"
  rm /usr/local/etc/rc.d/"${name}"
}

load_rc_config "${name}"
run_rc_command "$1"
EOF
} > /usr/local/etc/rc.d/"${name}"
  # Add the VM to /usr/local/etc/rc.d/bhyve for autostart
  sed -i '' -e "12s/^/service ${name} start && sleep 5\n/g"  /usr/local/etc/rc.d/bhyve
}

centos() {
  bridge="$(sysrc cloned_interfaces | awk '{print $2}')"
  # Create a VM dataset
  zfs create zroot/VMs/"${name}"
  # Create a tap interface and make it member of the bridge
  tap="$(ifconfig tap create)"
  ifconfig "${bridge}" addm "${tap}"
  # To start tap interface at boot time
  sysrc cloned_interfaces+="${tap}"
  sysrc "ifconfig_${bridge}=$(sysrc ifconfig_"${bridge}" | awk '
  { for(i=2; i<=NF; i++) printf "%s",$i (i==NF?ORS:OFS) }') addm ${tap}"
  # Create ZFS volume
  zfs create -V"${disk}"G -o volmode=dev zroot/VMs/"${name}"/disk0
  # VM installation
  installation() {
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 3,ahci-cd,"${centos_iso}" \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768,wait \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}"
  }
  # VM starting
  starting()
  {
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768 \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}"
  }   
  # Start the installation
  installation &&
  # Starting the loop after completion of the installation
  while true; do
    starting || break;
  done > /dev/null 2>&1 &
  
  touch /usr/local/etc/rc.d/"${name}"
  chmod +x /usr/local/etc/rc.d/"${name}"
  {
  cat << EOF
#!/bin/sh
#
# PROVIDE: ${name}
# REQUIRE: DAEMON
# KEYWORD: shutdown
#

. /etc/rc.subr

cpu="${cpu}"
ram="${ram}"
tap="${tap}"
name="${name}"
EOF
  sed -n '3,16p' ./bhyve
  cat << EOF

start_cmd=${name}_start
stop_cmd=${name}_stop
restart_cmd=${name}_restart
delete_cmd=${name}_delete

${name}_start() {
EOF
  cat << 'EOF'
  while true; do
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768 \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}" || break;
  done > /dev/null 2>&1 &
}
EOF
  cat << EOF

${name}_stop() {
EOF
  cat << 'EOF'
  bhyvectl --vm="${name}" --force-poweroff
}
EOF
  cat << EOF

${name}_restart() {
EOF
cat << 'EOF'
  bhyvectl --vm="${name}" --force-reset
}
EOF
  cat << EOF

${name}_delete() {
EOF
  cat << 'EOF'
  bhyvectl --vm="${name}" --destroy
  sleep 5
  ifconfig "${tap}" destroy
  sysrc cloned_interfaces-="${tap}"
EOF
  cat << EOF
  sed -i '' 's/ addm ${tap}//g' /etc/rc.conf
  sed -i '' 's/service ${name} start && sleep 5//g' /usr/local/etc/rc.d/bhyve
  sed -i '' '/^$/d' /usr/local/etc/rc.d/bhyve
EOF
  cat << 'EOF'
  zfs destroy -r zroot/VMs/"${name}"
  rm /usr/local/etc/rc.d/"${name}"
}

load_rc_config "${name}"
run_rc_command "$1"
EOF
} > /usr/local/etc/rc.d/"${name}"
  # Add the VM to /usr/local/etc/rc.d/bhyve for autostart
  sed -i '' -e "12s/^/service ${name} start && sleep 5\n/g"  /usr/local/etc/rc.d/bhyve
}

opensuse() {
  bridge="$(sysrc cloned_interfaces | awk '{print $2}')"
  # Create a VM dataset
  zfs create zroot/VMs/"${name}"
  # Create a tap interface and make it member of the bridge
  tap="$(ifconfig tap create)"
  ifconfig "${bridge}" addm "${tap}"
  # To start tap interface at boot time
  sysrc cloned_interfaces+="${tap}"
  sysrc "ifconfig_${bridge}=$(sysrc ifconfig_"${bridge}" | awk '
  { for(i=2; i<=NF; i++) printf "%s",$i (i==NF?ORS:OFS) }') addm ${tap}"
  # Create ZFS volume
  zfs create -V"${disk}"G -o volmode=dev zroot/VMs/"${name}"/disk0
  # VM installation
  installation() {
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 3,ahci-cd,"${opensuse_iso}" \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768,wait \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}"
  }
  # VM starting
  starting()
  {
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768 \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}"
  }   
  # Start the installation
  installation &&
  # Starting the loop after completion of the installation
  while true; do
    starting || break;
  done > /dev/null 2>&1 &
  
  touch /usr/local/etc/rc.d/"${name}"
  chmod +x /usr/local/etc/rc.d/"${name}"
  {
  cat << EOF
#!/bin/sh
#
# PROVIDE: ${name}
# REQUIRE: DAEMON
# KEYWORD: shutdown
#

. /etc/rc.subr

cpu="${cpu}"
ram="${ram}"
tap="${tap}"
name="${name}"
EOF
  sed -n '3,16p' ./bhyve
  cat << EOF

start_cmd=${name}_start
stop_cmd=${name}_stop
restart_cmd=${name}_restart
delete_cmd=${name}_delete

${name}_start() {
EOF
  cat << 'EOF'
  while true; do
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768 \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}" || break;
  done > /dev/null 2>&1 &
}
EOF
  cat << EOF

${name}_stop() {
EOF
  cat << 'EOF'
  bhyvectl --vm="${name}" --force-poweroff
}
EOF
  cat << EOF

${name}_restart() {
EOF
cat << 'EOF'
  bhyvectl --vm="${name}" --force-reset
}
EOF
  cat << EOF

${name}_delete() {
EOF
  cat << 'EOF'
  bhyvectl --vm="${name}" --destroy
  sleep 5
  ifconfig "${tap}" destroy
  sysrc cloned_interfaces-="${tap}"
EOF
  cat << EOF
  sed -i '' 's/ addm ${tap}//g' /etc/rc.conf
  sed -i '' 's/service ${name} start && sleep 5//g' /usr/local/etc/rc.d/bhyve
  sed -i '' '/^$/d' /usr/local/etc/rc.d/bhyve
EOF
  cat << 'EOF'
  zfs destroy -r zroot/VMs/"${name}"
  rm /usr/local/etc/rc.d/"${name}"
}

load_rc_config "${name}"
run_rc_command "$1"
EOF
} > /usr/local/etc/rc.d/"${name}"
  # Add the VM to /usr/local/etc/rc.d/bhyve for autostart
  sed -i '' -e "12s/^/service ${name} start && sleep 5\n/g"  /usr/local/etc/rc.d/bhyve
}

microos() {
  bridge="$(sysrc cloned_interfaces | awk '{print $2}')"
  # Create a VM dataset
  zfs create zroot/VMs/"${name}"
  # Create a tap interface and make it member of the bridge
  tap="$(ifconfig tap create)"
  ifconfig "${bridge}" addm "${tap}"
  # To start tap interface at boot time
  sysrc cloned_interfaces+="${tap}"
  sysrc "ifconfig_${bridge}=$(sysrc ifconfig_"${bridge}" | awk '
  { for(i=2; i<=NF; i++) printf "%s",$i (i==NF?ORS:OFS) }') addm ${tap}"
  # Create ZFS volume
  zfs create -V"${disk}"G -o volmode=dev zroot/VMs/"${name}"/disk0
  # VM installation
  installation() {
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 3,ahci-cd,"${microos_iso}" \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768,wait \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}"
  }
  # VM starting
  starting()
  {
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768 \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}"
  }   
  # Start the installation
  installation &&
  # Starting the loop after completion of the installation
  while true; do
    starting || break;
  done > /dev/null 2>&1 &
  
  touch /usr/local/etc/rc.d/"${name}"
  chmod +x /usr/local/etc/rc.d/"${name}"
  {
  cat << EOF
#!/bin/sh
#
# PROVIDE: ${name}
# REQUIRE: DAEMON
# KEYWORD: shutdown
#

. /etc/rc.subr

cpu="${cpu}"
ram="${ram}"
tap="${tap}"
name="${name}"
EOF
  sed -n '3,16p' ./bhyve
  cat << EOF

start_cmd=${name}_start
stop_cmd=${name}_stop
restart_cmd=${name}_restart
delete_cmd=${name}_delete

${name}_start() {
EOF
  cat << 'EOF'
  while true; do
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768 \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}" || break;
  done > /dev/null 2>&1 &
}
EOF
  cat << EOF

${name}_stop() {
EOF
  cat << 'EOF'
  bhyvectl --vm="${name}" --force-poweroff
}
EOF
  cat << EOF

${name}_restart() {
EOF
cat << 'EOF'
  bhyvectl --vm="${name}" --force-reset
}
EOF
  cat << EOF

${name}_delete() {
EOF
  cat << 'EOF'
  bhyvectl --vm="${name}" --destroy
  sleep 5
  ifconfig "${tap}" destroy
  sysrc cloned_interfaces-="${tap}"
EOF
  cat << EOF
  sed -i '' 's/ addm ${tap}//g' /etc/rc.conf
  sed -i '' 's/service ${name} start && sleep 5//g' /usr/local/etc/rc.d/bhyve
  sed -i '' '/^$/d' /usr/local/etc/rc.d/bhyve
EOF
  cat << 'EOF'
  zfs destroy -r zroot/VMs/"${name}"
  rm /usr/local/etc/rc.d/"${name}"
}

load_rc_config "${name}"
run_rc_command "$1"
EOF
} > /usr/local/etc/rc.d/"${name}"
  # Add the VM to /usr/local/etc/rc.d/bhyve for autostart
  sed -i '' -e "12s/^/service ${name} start && sleep 5\n/g"  /usr/local/etc/rc.d/bhyve
}

windows() {
  bridge="$(sysrc cloned_interfaces | awk '{print $2}')"
  # Create a VM dataset
  zfs create zroot/VMs/"${name}"
  # Create a tap interface and make it member of the bridge
  tap="$(ifconfig tap create)"
  ifconfig "${bridge}" addm "${tap}"
  # To start tap interface at boot time
  sysrc cloned_interfaces+="${tap}"
  sysrc "ifconfig_${bridge}=$(sysrc ifconfig_"${bridge}" | awk '
  { for(i=2; i<=NF; i++) printf "%s",$i (i==NF?ORS:OFS) }') addm ${tap}"
  # Create ZFS volume
  zfs create -V"${disk}"G -o volmode=dev zroot/VMs/"${name}"/disk0
  # VM installation
  first_installation() {
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 3,ahci-cd,"${windows_iso}" \
      -s 4,ahci-cd,"${virtio_iso}" \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768,wait \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}"
  }
  second_installation() {
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 3,ahci-cd,"${windows_iso}" \
      -s 4,ahci-cd,"${virtio_iso}" \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768,wait \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}"
  }
  third_installation() {
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 3,ahci-cd,"${windows_iso}" \
      -s 4,ahci-cd,"${virtio_iso}" \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768,wait \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}"
  }
  # VM starting
  starting()
  {
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768 \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}"
  }   
  # Start the installation
  first_installation && second_installation && third_installation &&
  # Starting the loop after completion of the installation
  while true; do
    starting || break;
  done > /dev/null 2>&1 &
  
  touch /usr/local/etc/rc.d/"${name}"
  chmod +x /usr/local/etc/rc.d/"${name}"
  {
  cat << EOF
#!/bin/sh
#
# PROVIDE: ${name}
# REQUIRE: DAEMON
# KEYWORD: shutdown
#

. /etc/rc.subr

cpu="${cpu}"
ram="${ram}"
tap="${tap}"
name="${name}"
EOF
  sed -n '3,16p' ./bhyve
  cat << EOF

start_cmd=${name}_start
stop_cmd=${name}_stop
restart_cmd=${name}_restart
delete_cmd=${name}_delete

${name}_start() {
EOF
  cat << 'EOF'
  while true; do
    bhyve -Hw -c "${cpu}" -m "${ram}"G \
      -s 0,hostbridge \
      -s 1,virtio-net,"${tap}" \
      -s 2,virtio-blk,/dev/zvol/zroot/VMs/"${name}"/disk0 \
      -s 29,fbuf,tcp=0.0.0.0:"${vnc}",w=1024,h=768 \
      -s 30,xhci,tablet \
      -s 31,lpc \
      -l bootrom,/zroot/VMs/efi.fd \
      "${name}" || break;
  done > /dev/null 2>&1 &
}
EOF
  cat << EOF

${name}_stop() {
EOF
  cat << 'EOF'
  bhyvectl --vm="${name}" --force-poweroff
}
EOF
  cat << EOF

${name}_restart() {
EOF
cat << 'EOF'
  bhyvectl --vm="${name}" --force-reset
}
EOF
  cat << EOF

${name}_delete() {
EOF
  cat << 'EOF'
  bhyvectl --vm="${name}" --destroy
  sleep 5
  ifconfig "${tap}" destroy
  sysrc cloned_interfaces-="${tap}"
EOF
  cat << EOF
  sed -i '' 's/ addm ${tap}//g' /etc/rc.conf
  sed -i '' 's/service ${name} start && sleep 5//g' /usr/local/etc/rc.d/bhyve
  sed -i '' '/^$/d' /usr/local/etc/rc.d/bhyve
EOF
  cat << 'EOF'
  zfs destroy -r zroot/VMs/"${name}"
  rm /usr/local/etc/rc.d/"${name}"
}

load_rc_config "${name}"
run_rc_command "$1"
EOF
} > /usr/local/etc/rc.d/"${name}"
  # Add the VM to /usr/local/etc/rc.d/bhyve for autostart
  sed -i '' -e "12s/^/service ${name} start && sleep 5\n/g"  /usr/local/etc/rc.d/bhyve
}

# The Dialog Menu
while true; do
  menu="$(dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
          --stdout --nocancel --menu "Select your OS:" 0 0 0 \
          1 "FreeBSD 12.2" 2 "OpenBSD 6.8" 3 "Ubuntu 20.10" 4 "Fedora 33 Server" 5 "CentOS 8 (2011)" \
          6 "openSUSE Tumbleweed" 7 "openSUSE MicroOS" 8 "Windows 10" 9 "Setup (ZFS)" 10 "Clean (ZFS)" 11 "Exit")"
  if [ "${menu}" -eq 1 ]; then
    while true; do
      if dialog --title "FreeBSD" --stdout --nocancel --inputbox "The VM name:" 0 0 FreeBSD \
          --and-widget --title "FreeBSD" --nocancel --inputbox "RAM (GB):" 0 0 8 \
          --and-widget --title "FreeBSD" --nocancel --inputbox "CPUs:" 0 0 2 \
          --and-widget --title "FreeBSD" --nocancel --inputbox "Disk size (GB):" 0 0 32 > output.txt; then
      name="$(< output.txt awk '{print $1}')"
      ram="$(< output.txt awk '{print $2}')"
      cpu="$(< output.txt awk '{print $3}')"
      disk="$(< output.txt awk '{print $4}')"
      vmd="/zroot/VMs"
      freebsd_iso="/zroot/VMs/ISOs/FreeBSD-12.2-RELEASE-amd64-disc1.iso"
      if [ ! -d "${vmd}" ]; then
        dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "/zroot/VMs directory does not exist, please run Setup first" 5 65
        rm output.txt
        exit
      elif [ ! -f "${freebsd_iso}" ]; then
        #pkg install ca_root_nss
        fetch -o /zroot/VMs/ISOs https://download.freebsd.org/ftp/releases/amd64/amd64/ISO-IMAGES/12.2/FreeBSD-12.2-RELEASE-amd64-disc1.iso
      elif [ -f "/usr/local/etc/rc.d/${name}" ]; then
      dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "The VM ${name} already exists, please choose another name" 5 65
        break;
      fi
      freebsd > /dev/null 2>&1
      dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "The VM ${name} has been created" 0 0
        rm output.txt
      else
        rm output.txt
        break;
      fi
    done
  elif [ "${menu}" -eq 2 ]; then
    while true; do
      if dialog --title "OpenBSD" --stdout --nocancel --inputbox "The VM name:" 0 0 OpenBSD \
          --and-widget --title "OpenBSD" --nocancel --inputbox "RAM (GB):" 0 0 4 \
          --and-widget --title "OpenBSD" --nocancel --inputbox "CPUs:" 0 0 2 \
          --and-widget --title "OpenBSD" --nocancel --inputbox "Disk size (GB):" 0 0 32 > output.txt; then
      name="$(< output.txt awk '{print $1}')"
      ram="$(< output.txt awk '{print $2}')"
      cpu="$(< output.txt awk '{print $3}')"
      disk="$(< output.txt awk '{print $4}')"
      vmd="/zroot/VMs"
      openbsd_iso="/zroot/VMs/ISOs/install68.img"
      if [ ! -d "${vmd}" ]; then
        dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "/zroot/VMs directory does not exist, please run Setup first" 5 65
        rm output.txt
        exit
      elif [ ! -f "${openbsd_iso}" ]; then
        #pkg install ca_root_nss
        fetch -o /zroot/VMs/ISOs https://cdn.openbsd.org/pub/OpenBSD/6.8/amd64/install68.img
      elif [ -f "/usr/local/etc/rc.d/${name}" ]; then
      dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "The VM ${name} already exists, please choose another name" 5 65
        break;
      fi
      openbsd > /dev/null 2>&1
      dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "The VM ${name} has been created" 0 0
        rm output.txt
      else
        rm output.txt
        break;
      fi
    done
  elif [ "${menu}" -eq 3 ]; then
    while true; do
      if dialog --title "Ubuntu" --stdout --nocancel --inputbox "The VM name:" 0 0 Ubuntu \
          --and-widget --title "Ubuntu" --nocancel --inputbox "RAM (GB):" 0 0 8 \
          --and-widget --title "Ubuntu" --nocancel --inputbox "CPUs:" 0 0 2 \
          --and-widget --title "Ubuntu" --nocancel --inputbox "Disk size (GB):" 0 0 32 > output.txt; then
      name="$(< output.txt awk '{print $1}')"
      ram="$(< output.txt awk '{print $2}')"
      cpu="$(< output.txt awk '{print $3}')"
      disk="$(< output.txt awk '{print $4}')"
      vmd="/zroot/VMs"
      ubuntu_iso="/zroot/VMs/ISOs/ubuntu-20.10-desktop-amd64.iso"
      if [ ! -d "${vmd}" ]; then
        dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "/zroot/VMs directory does not exist, please run Setup first" 5 65
        rm output.txt
        exit
      elif [ ! -f "${ubuntu_iso}" ]; then
        #pkg install ca_root_nss
        fetch -o /zroot/VMs/ISOs https://releases.ubuntu.com/20.10/ubuntu-20.10-desktop-amd64.iso
      elif [ -f "/usr/local/etc/rc.d/${name}" ]; then
      dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "The VM ${name} already exists, please choose another name" 5 65
        break;
      fi
      ubuntu > /dev/null 2>&1
      dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "The VM ${name} has been created" 0 0
        rm output.txt
      else
        rm output.txt
        break;
      fi
    done
  elif [ "${menu}" -eq 4 ]; then
    while true; do
      if dialog --title "Fedora" --stdout --nocancel --inputbox "The VM name:" 0 0 Fedora \
          --and-widget --title "Fedora" --nocancel --inputbox "RAM (GB):" 0 0 4 \
          --and-widget --title "Fedora" --nocancel --inputbox "CPUs:" 0 0 2 \
          --and-widget --title "Fedora" --nocancel --inputbox "Disk size (GB):" 0 0 32 > output.txt; then
      name="$(< output.txt awk '{print $1}')"
      ram="$(< output.txt awk '{print $2}')"
      cpu="$(< output.txt awk '{print $3}')"
      disk="$(< output.txt awk '{print $4}')"
      vmd="/zroot/VMs"
      fedora_iso="/zroot/VMs/ISOs/Fedora-Server-dvd-x86_64-33-1.2.iso"
      if [ ! -d "${vmd}" ]; then
        dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "/zroot/VMs directory does not exist, please run Setup first" 5 65
        rm output.txt
        exit
      elif [ ! -f "${fedora_iso}" ]; then
        #pkg install ca_root_nss
        fetch -o /zroot/VMs/ISOs https://download.fedoraproject.org/pub/fedora/linux/releases/33/Server/x86_64/iso/Fedora-Server-dvd-x86_64-33-1.2.iso
      elif [ -f "/usr/local/etc/rc.d/${name}" ]; then
      dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "The VM ${name} already exists, please choose another name" 5 65
        break;
      fi
      fedora > /dev/null 2>&1
      dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "The VM ${name} has been created" 0 0
        rm output.txt
      else
        rm output.txt
        break;
      fi
    done
  elif [ "${menu}" -eq 5 ]; then
    while true; do
      if dialog --title "CentOS" --stdout --nocancel --inputbox "The VM name:" 0 0 CentOS \
          --and-widget --title "CentOS" --nocancel --inputbox "RAM (GB):" 0 0 4 \
          --and-widget --title "CentOS" --nocancel --inputbox "CPUs:" 0 0 2 \
          --and-widget --title "CentOS" --nocancel --inputbox "Disk size (GB):" 0 0 32 > output.txt; then
      name="$(< output.txt awk '{print $1}')"
      ram="$(< output.txt awk '{print $2}')"
      cpu="$(< output.txt awk '{print $3}')"
      disk="$(< output.txt awk '{print $4}')"
      vmd="/zroot/VMs"
      centos_iso="/zroot/VMs/ISOs/CentOS-8.3.2011-x86_64-dvd1.iso"
      if [ ! -d "${vmd}" ]; then
        dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "/zroot/VMs directory does not exist, please run Setup first" 5 65
        rm output.txt
        exit
      elif [ ! -f "${centos_iso}" ]; then
        #pkg install ca_root_nss
        fetch -o /zroot/VMs/ISOs https://mirror.arizona.edu/centos/8.3.2011/isos/x86_64/CentOS-8.3.2011-x86_64-dvd1.iso
      elif [ -f "/usr/local/etc/rc.d/${name}" ]; then
      dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "The VM ${name} already exists, please choose another name" 5 65
        break;
      fi
      centos > /dev/null 2>&1
      dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "The VM ${name} has been created" 0 0
        rm output.txt
      else
        rm output.txt
        break;
      fi
    done
  elif [ "${menu}" -eq 6 ]; then
    while true; do
      if dialog --title "openSUSE" --stdout --nocancel --inputbox "The VM name:" 0 0 openSUSE \
          --and-widget --title "openSUSE" --nocancel --inputbox "RAM (GB):" 0 0 4 \
          --and-widget --title "openSUSE" --nocancel --inputbox "CPUs:" 0 0 2 \
          --and-widget --title "openSUSE" --nocancel --inputbox "Disk size (GB):" 0 0 32 > output.txt; then
      name="$(< output.txt awk '{print $1}')"
      ram="$(< output.txt awk '{print $2}')"
      cpu="$(< output.txt awk '{print $3}')"
      disk="$(< output.txt awk '{print $4}')"
      vmd="/zroot/VMs"
      opensuse_iso="/zroot/VMs/ISOs/openSUSE-Tumbleweed-DVD-x86_64-Current.iso"
      if [ ! -d "${vmd}" ]; then
        dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "/zroot/VMs directory does not exist, please run Setup first" 5 65
        rm output.txt
        exit
      elif [ ! -f "${opensuse_iso}" ]; then
        #pkg install ca_root_nss
        fetch -o /zroot/VMs/ISOs https://download.opensuse.org/tumbleweed/iso/openSUSE-Tumbleweed-DVD-x86_64-Current.iso
      elif [ -f "/usr/local/etc/rc.d/${name}" ]; then
      dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "The VM ${name} already exists, please choose another name" 5 65
        break;
      fi
      opensuse > /dev/null 2>&1
      dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "The VM ${name} has been created" 0 0
        rm output.txt
      else
        rm output.txt
        break;
      fi
    done
  
  elif [ "${menu}" -eq 7 ]; then
    while true; do
      if dialog --title "MicroOS" --stdout --nocancel --inputbox "The VM name:" 0 0 MicroOS \
          --and-widget --title "MicroOS" --nocancel --inputbox "RAM (GB):" 0 0 8 \
          --and-widget --title "MicroOS" --nocancel --inputbox "CPUs:" 0 0 2 \
          --and-widget --title "MicroOS" --nocancel --inputbox "Disk size (GB):" 0 0 32 > output.txt; then
      name="$(< output.txt awk '{print $1}')"
      ram="$(< output.txt awk '{print $2}')"
      cpu="$(< output.txt awk '{print $3}')"
      disk="$(< output.txt awk '{print $4}')"
      vmd="/zroot/VMs"
      microos_iso="/zroot/VMs/ISOs/openSUSE-MicroOS-DVD-x86_64-Current.iso"
      if [ ! -d "${vmd}" ]; then
        dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "/zroot/VMs directory does not exist, please run Setup first" 5 65
        rm output.txt
        exit
      elif [ ! -f "${microos_iso}" ]; then
        #pkg install ca_root_nss
        fetch -o /zroot/VMs/ISOs https://download.opensuse.org/tumbleweed/iso/openSUSE-MicroOS-DVD-x86_64-Current.iso
      elif [ -f "/usr/local/etc/rc.d/${name}" ]; then
      dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "The VM ${name} already exists, please choose another name" 5 65
        break;
      fi
      microos > /dev/null 2>&1
      dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "The VM ${name} has been created" 0 0
        rm output.txt
      else
        rm output.txt
        break;
      fi
    done
  elif [ "${menu}" -eq 8 ]; then
    while true; do
      if dialog --title "Windows" --backtitle "bhyve, the BSD hypervisor" \
          --no-label "No" --yes-label "Yes" \
          --yesno "Did you copy Windows ISO image to /zroot/VMs/ISOs/Win10_20H2_English_x64.iso" 5 80; then
      if dialog --title "Windows" --stdout --nocancel --inputbox "The VM name:" 0 0 Windows \
          --and-widget --title "Windows" --nocancel --inputbox "RAM (GB):" 0 0 16 \
          --and-widget --title "Windows" --nocancel --inputbox "CPUs:" 0 0 2 \
          --and-widget --title "Windows" --nocancel --inputbox "Disk size (GB):" 0 0 64 > output.txt; then
      name="$(< output.txt awk '{print $1}')"
      ram="$(< output.txt awk '{print $2}')"
      cpu="$(< output.txt awk '{print $3}')"
      disk="$(< output.txt awk '{print $4}')"
      vmd="/zroot/VMs"
      virtio_iso="/zroot/VMs/ISOs/virtio-win-0.1.185.iso"
      windows_iso="/zroot/VMs/ISOs/Win10_20H2_English_x64.iso"
      if [ ! -d "${vmd}" ]; then
        dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "/zroot/VMs directory does not exist, please run Setup first" 5 65
        rm output.txt
        exit
      fi
      if [ ! -f "${virtio_iso}" ]; then
        #pkg install ca_root_nss
        fetch -o /zroot/VMs/ISOs https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-0.1.185-2/virtio-win-0.1.185.iso
      fi
      if [ ! -f "${windows_iso}" ]; then
        dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "Windows ISO image are not exist, please download it & copy it to /zroot/VMs/ISOs/Win10_20H2_English_x64.iso" 5 111
        rm output.txt
        exit;
      elif [ -f "/usr/local/etc/rc.d/${name}" ]; then
      dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "The VM ${name} already exists, please choose another name" 5 65
        break;
      fi
      windows > /dev/null 2>&1
      dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "The VM ${name} has been created" 0 0
        rm output.txt
      else
        rm output.txt
        break;
      fi
      else
        break;
      fi
    done
  elif [ "${menu}" -eq 9 ]; then
      if dialog --title "Setup" --backtitle "bhyve, the BSD hypervisor" \
          --no-label "No" --yes-label "Yes" \
          --yesno "Would you like to proceed?" 5 30; then
      isod="/zroot/VMs/ISOs"
      efi="./efi.fd"
      if [ -d "${isod}" ]; then
        dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "bhyve is installed, nothing to do." 5 38
        exit;
      elif [ ! -f "${efi}" ]; then
        dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "efi.fd file doesn't exist, please get it along with bhyve script" 5 68
        exit;
      fi
      setup > /dev/null 2>&1
      dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "Enjoy virtualization with bhyve under FreeBSD" 5 49
      else
        break;
      fi
  elif [ "${menu}" -eq 10 ]; then
      if dialog --title "Clean" --backtitle "bhyve, the BSD hypervisor" \
          --no-label "No" --yes-label "Yes" \
          --yesno "Would you like to proceed?" 5 30; then
      zfs destroy -r zroot/VMs/ISOs
      rm /zroot/VMs/efi.fd
      vmd="/zroot/VMs"
      if [ ! -d "${vmd}" ]; then
        dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "bhyve isn't installed, nothing to do." 5 41
        exit
      elif [ "$(ls -A ${vmd})" ]; then
         dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "${vmd} is not Empty." 5 49
         exit
      elif [ -z "$(ls -A ${vmd})" ]; then # if it's empty
         zfs destroy -r zroot/VMs
      fi
      clean > /dev/null 2>&1
      dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
        --msgbox "Check /zroot/VMs, if it's not empty you must destroy it manually" 5 68
      else
        break;
      fi
  elif [ "${menu}" -eq 11 ]; then
    dialog --title "bhyve" --backtitle "bhyve, the BSD hypervisor" \
    --no-label "Yes" --yes-label "No" \
      --yesno "Would you like to exit?" 0 0
    if [ $? -eq 1 ]; then
      break;
    fi
  fi
done
